#include <iostream>
#include <string>
#include <cassert>

using namespace std;

string get_local_part(string email) {
    string local = "";
    for (int i = 0; i < email.length(); i++) {
        if (email[i] == '@') {
            break;
        }
        local += email[i];
    }
    return local;
}

string get_domain_part(string email) {
    string domain = "";
    bool found_at = false;
    for (int i = 0; i < email.length(); i++) {
        if (email[i] == '@') {
            found_at = true;
            continue;
        }
        if (found_at) {
            domain += email[i];
        }
    }
    return domain;
}

bool is_valid_char_local(char ch) {
    string allowed = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-!#$%&'*+-/=?^_`{|}~";
    for (int i = 0; i < allowed.length(); i++) {
        if (ch == allowed[i]) {
            return true;
        }
    }
    return false;
}

bool is_valid_char_domain(char ch) {
    string allowed = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-";
    for (int i = 0; i < allowed.length(); i++) {
        if (ch == allowed[i]) {
            return true;
        }
    }
    return false;
}

bool validate_part(string part, bool is_local) {
    if (part.length() == 0) {
        return false;
    }
    
    if (is_local && part.length() > 64) {
        return false;
    }
    
    if (!is_local && part.length() > 63) {
        return false;
    }
    
    if (part[0] == '.' || part[part.length() - 1] == '.') {
        return false;
    }
    
    for (int i = 0; i < part.length(); i++) {
        if (part[i] == '.' && i + 1 < part.length() && part[i + 1] == '.') {
            return false;
        }
        
        if (is_local) {
            if (!is_valid_char_local(part[i])) {
                return false;
            }
        } else {
            if (!is_valid_char_domain(part[i])) {
                return false;
            }
        }
    }
    
    return true;
}

bool is_valid_email(string email) {
    int at_count = 0;
    int at_pos = -1;
    
    for (int i = 0; i < email.length(); i++) {
        if (email[i] == '@') {
            at_count++;
            at_pos = i;
        }
    }
    
    if (at_count != 1) {
        return false;
    }
    
    string local = get_local_part(email);
    string domain = get_domain_part(email);
    
    return validate_part(local, true) && validate_part(domain, false);
}

void test_valid_emails() {
    cout << "=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤ ===" << endl;
    
    string valid_emails[] = {
        "simple@example.com",
        "very.common@example.com", 
        "disposable.style.email.with+symbol@example.com",
        "other.email-with-hyphen@example.com",
        "fully-qualified-domain@example.com",
        "user.name+tag+sorting@example.com",
        "x@example.com",
        "example-indeed@strange-example.com",
        "admin@mailserver1",
        "example@s.example",
        "mailhost!username@example.org",
        "user%example.com@example.org"
    };
    
    for (int i = 0; i < 12; i++) {
        bool result = is_valid_email(valid_emails[i]);
        cout << "–¢–µ—Å—Ç " << (i+1) << " - " << valid_emails[i] << ": " << (result ? "Yes" : "No") << endl;
        assert(result == true);
        cout << "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" << endl;
    }
}

void test_invalid_emails() {
    cout << "\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤ ===" << endl;
    
    string invalid_emails[] = {
        "John..Doe@example.com",
        "Abc.example.com",
        "A@b@c@example.com",
        "a\"b(c)d,e:f;g<h>i[j\\k]l@example.com",
        "1234567890123456789012345678901234567890123456789012345678901234+x@example.com",
        "i_like_underscore@but_its_not_allow_in_this_part.example.com"
    };
    
    string descriptions[] = {
        "–¥–≤–µ —Ç–æ—á–∫–∏ –ø–æ–¥—Ä—è–¥",
        "–Ω–µ—Ç —Å–∏–º–≤–æ–ª–∞ @", 
        "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ @",
        "–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã",
        "–ª–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 64 —Å–∏–º–≤–æ–ª–æ–≤",
        "–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª –≤ –¥–æ–º–µ–Ω–µ"
    };
    
    for (int i = 0; i < 6; i++) {
        bool result = is_valid_email(invalid_emails[i]);
        cout << "–¢–µ—Å—Ç " << (i+1) << " - " << descriptions[i] << ": " << (result ? "Yes" : "No") << endl;
        assert(result == false);
        cout << "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" << endl;
    }
}

void test_edge_cases() {
    cout << "\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ ===" << endl;
    
    // –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ (63 —Å–∏–º–≤–æ–ª–∞ - –º–∞–∫—Å–∏–º—É–º)
    string long_domain = "a@" + string(63, 'a') + ".com";
    cout << "–¢–µ—Å—Ç 1 - –¥–æ–º–µ–Ω 63 —Å–∏–º–≤–æ–ª–∞: " << (is_valid_email(long_domain) ? "Yes" : "No") << endl;
    
    // –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ (64 —Å–∏–º–≤–æ–ª–∞)
    string too_long_domain = "a@" + string(64, 'a') + ".com";
    cout << "–¢–µ—Å—Ç 2 - –¥–æ–º–µ–Ω 64 —Å–∏–º–≤–æ–ª–∞: " << (is_valid_email(too_long_domain) ? "Yes" : "No") << endl;
    
    // –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ (64 —Å–∏–º–≤–æ–ª–∞ - –º–∞–∫—Å–∏–º—É–º)
    string long_local = string(64, 'a') + "@example.com";
    cout << "–¢–µ—Å—Ç 3 - –ª–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å 64 —Å–∏–º–≤–æ–ª–∞: " << (is_valid_email(long_local) ? "Yes" : "No") << endl;
    
    // –¢–µ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ (65 —Å–∏–º–≤–æ–ª–æ–≤)
    string too_long_local = string(65, 'a') + "@example.com";
    cout << "–¢–µ—Å—Ç 4 - –ª–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å 65 —Å–∏–º–≤–æ–ª–æ–≤: " << (is_valid_email(too_long_local) ? "Yes" : "No") << endl;
    
    cout << "‚úÖ –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã" << endl;
}

int main() {
    cout << "üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï EMAIL –í–ê–õ–ò–î–ê–¢–û–†–ê üîß" << endl;
    cout << "=====================================" << endl;
    
    try {
        test_valid_emails();
        test_invalid_emails();
        test_edge_cases();
        
        cout << "\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ" << endl;
        cout << "Email –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º." << endl;
        
    } catch (const exception& e) {
        cout << "\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!" << endl;
        cout << "–û—à–∏–±–∫–∞: " << e.what() << endl;
        return 1;
    }
    
    return 0;
}