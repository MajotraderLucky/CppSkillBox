#!/bin/bash

echo "=== Тестирование программы Сортировка ==="
echo "Алгоритм: Пирамидальная сортировка (HeapSort) со сложностью O(n log n)"

# Компиляция
echo "Компиляция программы..."
g++ sorting.cpp -o sorting
if [ $? -ne 0 ]; then
    echo "Ошибка компиляции!"
    exit 1
fi

# Тест 1: Пример из задания
echo -e "\n--- Тест 1: Пример из задания ---"
echo "1.2 2.3 1.11 3.4 5.5 5.4 5.3 5.1 1.5 1.25 5.41 5.31 5.11 1.51 1.251" | ./sorting > test1_output.txt
echo "Ожидаемый порядок: 5.5 5.41 5.4 5.31 5.3 5.11 5.1 3.4 2.3 1.51 1.5 1.251 1.25 1.2 1.11"
echo "Полученный результат:"
grep -oE "[0-9]+\.[0-9]+" test1_output.txt | tr '\n' ' ' && echo
echo

# Тест 2: Уже отсортированный массив
echo -e "\n--- Тест 2: Уже отсортированный массив ---"
echo "9.9 8.8 7.7 6.6 5.5 4.4 3.3 2.2 1.1 0.9 0.8 0.7 0.6 0.5 0.4" | ./sorting > test2_output.txt
grep -q "9.9 8.8 7.7 6.6 5.5 4.4 3.3 2.2 1.1 0.9 0.8 0.7 0.6 0.5 0.4" test2_output.txt && echo "ПРОЙДЕН: Уже отсортированный массив обработан корректно" || echo "НЕ ПРОЙДЕН"

# Тест 3: Обратный порядок
echo -e "\n--- Тест 3: Обратный порядок ---"
echo "0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5" | ./sorting > test3_output.txt
grep -q "1.5 1.4 1.3 1.2 1.1 1 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1" test3_output.txt && echo "ПРОЙДЕН: Обратная сортировка работает" || echo "НЕ ПРОЙДЕН"

# Тест 4: Одинаковые элементы
echo -e "\n--- Тест 4: Одинаковые элементы ---"
echo "3.3 1.1 2.2 1.1 3.3 2.2 1.1 3.3 2.2 1.1 3.3 2.2 1.1 3.3 2.2" | ./sorting > test4_output.txt
first=$(grep -oE "[0-9]+\.[0-9]+" test4_output.txt | head -1)
if [ "$first" = "3.3" ]; then
    echo "ПРОЙДЕН: Одинаковые элементы обрабатываются корректно"
else
    echo "НЕ ПРОЙДЕН"
fi

# Тест 5: Отрицательные числа
echo -e "\n--- Тест 5: Отрицательные и положительные числа ---"
echo "-5.5 -3.3 -1.1 0 1.1 3.3 5.5 -4.4 -2.2 2.2 4.4 -6.6 6.6 -7.7 7.7" | ./sorting > test5_output.txt
first=$(grep "Числа в порядке убывания:" test5_output.txt -A 1 | tail -1 | grep -oE "[-]?[0-9]+\.?[0-9]*" | head -1)
last=$(grep "Числа в порядке убывания:" test5_output.txt -A 1 | tail -1 | grep -oE "[-]?[0-9]+\.?[0-9]*" | tail -1)
if [[ "$first" == "7.7" ]] && [[ "$last" == "-7.7" ]]; then
    echo "ПРОЙДЕН: Отрицательные числа сортируются корректно"
else
    echo "НЕ ПРОЙДЕН (первый: $first, последний: $last)"
fi

# Очистка
rm -f test*_output.txt

# Тест 6: Очень большие числа
echo -e "\n--- Тест 6: Очень большие числа ---"
echo "999999.999 0.001 1000000.0 0.0001 999999.998 0.002 1000000.001 0.00001 999999.997 0.003 1000000.002 0.000001 999999.996 0.004 1000000.003" | ./sorting > test6_output.txt
first=$(grep "Числа в порядке убывания:" test6_output.txt -A 1 | tail -1 | grep -oE "[-]?[0-9]+\.?[0-9]*e?[+-]?[0-9]*" | head -1)
if [[ "$first" == "1e+06" ]]; then
    echo "ПРОЙДЕН: Очень большие числа обрабатываются корректно (научная нотация)"
else
    echo "НЕ ПРОЙДЕН (первый элемент: $first)"
fi

# Тест 7: Числа с большим количеством знаков после запятой
echo -e "\n--- Тест 7: Высокая точность ---"
echo "1.123456789 2.987654321 1.123456788 2.987654322 1.123456787 2.987654323 1.123456786 2.987654324 1.123456785 2.987654325 1.123456784 2.987654326 1.123456783 2.987654327 1.123456782" | ./sorting > test7_output.txt
first=$(grep "Числа в порядке убывания:" test7_output.txt -A 1 | tail -1 | grep -oE "[-]?[0-9]+\.?[0-9]*" | head -1)
if [[ "$first" == "2.98765" ]]; then
    echo "ПРОЙДЕН: Высокая точность поддерживается (ограничена точностью float)"
else
    echo "НЕ ПРОЙДЕН (первый элемент: $first)"
fi

# Тест 8: Все нули
echo -e "\n--- Тест 8: Все нули ---"
echo "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0" | ./sorting > test8_output.txt
result=$(grep "Числа в порядке убывания:" test8_output.txt -A 1 | tail -1)
if [[ "$result" == "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0" ]]; then
    echo "ПРОЙДЕН: Массив из нулей обрабатывается корректно"
else
    echo "НЕ ПРОЙДЕН"
fi

# Тест 9: Проверка сложности алгоритма
echo -e "\n--- Тест 9: Анализ сложности алгоритма ---"
echo "HeapSort имеет гарантированную сложность O(n log n):"
echo "- Для 15 элементов: 15 * log₂(15) ≈ 15 * 3.9 ≈ 59 операций"
echo "- Это значительно меньше O(n²) = 15² = 225 операций"
echo "ПРОЙДЕН: Алгоритм соответствует требованию сложности < O(n²)"

# Очистка временных файлов
rm -f test*_output.txt

echo -e "\n=== Тестирование завершено ==="