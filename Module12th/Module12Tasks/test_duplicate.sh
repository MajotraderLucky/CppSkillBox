#!/bin/bash

echo "=== Тестирование поиска повторяющегося числа ==="

# Создадим версию программы с параметризованными тестами
cat > find_duplicate_test.cpp << 'EOF'
#include <iostream>

void findDuplicate(int numbers[], int size, const char* testName) {
    std::cout << "\n--- " << testName << " ---" << std::endl;
    
    // Вывод массива
    std::cout << "Массив: ";
    for (int i = 0; i < size; ++i) {
        std::cout << numbers[i] << " ";
    }
    std::cout << std::endl;
    
    // Найдем минимальное и максимальное значения
    int min = numbers[0];
    int max = numbers[0];
    int actualSum = 0;
    
    for (int i = 0; i < size; ++i) {
        if (numbers[i] < min) min = numbers[i];
        if (numbers[i] > max) max = numbers[i];
        actualSum += numbers[i];
    }
    
    // Ожидаемая сумма последовательности
    int n = max - min + 1;
    int expectedSum = n * (min + max) / 2;
    
    // Повторяющееся число
    int duplicate = actualSum - expectedSum;
    
    std::cout << "Диапазон: " << min << " - " << max << std::endl;
    std::cout << "Фактическая сумма: " << actualSum << std::endl;
    std::cout << "Ожидаемая сумма: " << expectedSum << std::endl;
    std::cout << "Повторяющееся число: " << duplicate << std::endl;
}

int main() {
    // Тест 1: Пример из задания
    int test1[15] = {114, 111, 106, 107, 108, 105, 115, 108, 110, 109, 112, 113, 116, 117, 118};
    findDuplicate(test1, 15, "Тест 1: Пример из задания");
    
    // Тест 2: Последовательность от 1 до 14 с повторением 7
    int test2[15] = {1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11, 12, 13, 14};
    findDuplicate(test2, 15, "Тест 2: Повторяется 7");
    
    // Тест 3: Последовательность от 20 до 33 с повторением 25
    int test3[15] = {20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33};
    findDuplicate(test3, 15, "Тест 3: Повторяется 25");
    
    // Тест 4: Неупорядоченный массив с повторением 100
    int test4[15] = {100, 102, 98, 99, 101, 103, 104, 100, 105, 106, 107, 108, 109, 110, 111};
    findDuplicate(test4, 15, "Тест 4: Неупорядоченный, повторяется 100");
    
    // Тест 5: Минимальное повторение (начало диапазона)
    int test5[15] = {50, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63};
    findDuplicate(test5, 15, "Тест 5: Повторяется минимальное (50)");
    
    // Тест 6: Максимальное повторение (конец диапазона)
    int test6[15] = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23};
    findDuplicate(test6, 15, "Тест 6: Повторяется максимальное (23)");
    
    // Тест 7: Повторение в середине диапазона
    int test7[15] = {30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 37};
    findDuplicate(test7, 15, "Тест 7: Повторяется число в середине (37)");
    
    // Тест 8: Очень большие числа
    int test8[15] = {1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1005};
    findDuplicate(test8, 15, "Тест 8: Большие числа, повторяется 1005");
    
    // Тест 9: Отрицательные числа
    int test9[15] = {-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, -5};
    findDuplicate(test9, 15, "Тест 9: Отрицательные числа, повторяется -5");
    
    // Тест 10: Проверка граничных случаев - повторение первого элемента
    int test10[15] = {1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
    findDuplicate(test10, 15, "Тест 10: Повторяется первый элемент (1)");
    
    // Тест 11: Проверка граничных случаев - повторение последнего элемента
    int test11[15] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14};
    findDuplicate(test11, 15, "Тест 11: Повторяется последний элемент (14)");
    
    // Тест 12: Проверка математической корректности с четным количеством элементов в диапазоне
    int test12[15] = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 12};
    findDuplicate(test12, 15, "Тест 12: Четный диапазон, повторяется 12");
    
    return 0;
}
EOF

# Компиляция
echo "Компиляция тестовой программы..."
g++ find_duplicate_test.cpp -o find_duplicate_test
if [ $? -ne 0 ]; then
    echo "Ошибка компиляции!"
    exit 1
fi

# Запуск тестов
echo -e "\n=== Запуск тестов ==="
./find_duplicate_test

# Компиляция основной программы
echo -e "\n=== Проверка основной программы ==="
g++ find_duplicate.cpp -o find_duplicate
if [ $? -ne 0 ]; then
    echo "Ошибка компиляции основной программы!"
    exit 1
fi

echo "Запуск основной программы:"
./find_duplicate

# Проверка сложности
echo -e "\n=== Анализ сложности ==="
echo "Алгоритм имеет сложность O(n):"
echo "- Один проход по массиву для поиска min, max и суммы"
echo "- Все остальные операции - O(1)"
echo "- Дополнительная память - O(1) (только переменные)"

# Очистка
rm -f find_duplicate_test find_duplicate_test.cpp

echo -e "\n=== Тестирование завершено ==="